
//Course of Introduction to Remote Sensing, satellite constellations and Google Earth Engine
//Teachers: Prof.Maria Brovelli,Prof.Vasil Yordanov, Prof.Guido Ceccherini
// Israa Ahmed Mohammed Abdalla - Msc.Geoinformatics Engineering -  person code:10831692


// Setting dates for BEFORE the flood
var before_start= '2020-07-01';
var before_end='2020-09-15';

//Setting dates for AFTER the flood
var after_start='2020-08-15';
var after_end='2020-09-30';

/********************************************************************************************
                           SET SAR PARAMETERS */

var polarization = "VH"; 
var pass_direction = "DESCENDING"; 
var difference_threshold = -3; 

//------------------------------- DATA SELECTION & PREPROCESSING --------------------------//

// Rename selected geometry feature 
var roi = ee.FeatureCollection(geometry);

// Load and filter Sentinel-1 GRD data by predefined parameters 
var collection= ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.eq('instrumentMode','IW'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', polarization))
  .filter(ee.Filter.eq('orbitProperties_pass',pass_direction)) 
  .filter(ee.Filter.eq('resolution_meters',10))
  .filterBounds(roi)
  .select(polarization);
  
// Select images by predefined dates
var before_collection = collection.filterDate(before_start, before_end);
var after_collection = collection.filterDate(after_start,after_end);


// Create a mosaic of selected tiles and clip to study area
var before = before_collection.mosaic().clip(roi);
var after = after_collection.mosaic().clip(roi);

  
// Apply reduce the radar speckle by smoothing  
var smoothing_radius = 50;
var before_filtered = before.focal_mean(smoothing_radius, 'circle', 'meters');
var after_filtered = after.focal_mean(smoothing_radius, 'circle', 'meters');


//------------------------------- FLOOD EXTENT CALCULATION -------------------------------//

// Calculate the difference between the before and after images
var difference = after_filtered.subtract(before_filtered);

// Apply the predefined difference-threshold and create the flood extent mask 
var threshold = difference_threshold;
var difference_binary = difference.lt(threshold);

Map.addLayer(difference_binary,{min:0, max:1},'difference_binary',0)

// Refine flood result using additional datasets
      
      // Include JRC layer on surface water seasonality to mask flood pixels from areas
      // of "permanent" water (where there is water > 10 months of the year)
      var swater = ee.Image('JRC/GSW1_0/GlobalSurfaceWater').select('seasonality');
      var swater_mask = swater.updateMask(swater.gte(10));
      
      //Flooded layer where perennial water bodies (water > 10 mo/yr) is assigned a 0 value
      var flooded_mask = difference_binary.where(swater_mask,0);
      // final flooded area without pixels in perennial waterbodies
      var flooded = flooded_mask.updateMask(flooded_mask);
      
      // Compute connectivity of pixels to eliminate those connected to 8 or fewer neighbours
      // This operation reduces noise of the flood extent product 
      var connections = flooded.connectedPixelCount();    
      var flooded = flooded.updateMask(connections.gte(8));
      
      // Mask out areas with more than 5 percent slope using a Digital Elevation Model 
      var DEM = ee.Image('WWF/HydroSHEDS/03VFDEM');
      var terrain = ee.Algorithms.Terrain(DEM);
      var slope = terrain.select('slope');
      var flooded = flooded.updateMask(slope.lt(5));

// Calculate flood extent area
// Create a raster layer containing the area information of each pixel 
var flood_pixelarea = flooded.select(polarization)
  .multiply(ee.Image.pixelArea());

// Sum the areas of flooded pixels
// default is set to 'bestEffort: true' in order to reduce compuation time, for a more 
// accurate result set bestEffort to false and increase 'maxPixels'. 
var flood_stats = flood_pixelarea.reduceRegion({
  reducer: ee.Reducer.sum(),              
  geometry: roi,
  scale: 20, // native resolution 
  maxPixels: 1e9,
  bestEffort: true
  });


// Convert the flood extent to hectares (area calculations are originally given in meters)  
var flood_area_ha = flood_stats
  .getNumber(polarization)
  .divide(10000)
  .round(); 

print('Flood Extent Area in Hectar', flood_area_ha);
  

// Before and after flood SAR mosaic
// Map.centerObject(aoi,10);
Map.addLayer(before_filtered, {min:-25,max:0}, 'Before Flood',0);
Map.addLayer(after_filtered, {min:-25,max:0}, 'After Flood',1);

// Difference layer
Map.addLayer(difference,{min:0,max:2},"Difference Layer",0);

// Flooded areas
Map.addLayer(flooded,{palette:"0000FF"},'Flooded areas');
 

//------------------------------  DAMAGE'S ASSSESSMENT  ----------------------------------//

//----------------------------- Exposed population density ----------------------------//

// Load JRC Global Human Settlement Popluation Density layer
// Resolution: 250. Number of people per cell is given.
var population_count = ee.Image('JRC/GHSL/P2016/POP_GPW_GLOBE_V1/2015').clip(roi);

// Calculate the amount of exposed population
// get GHSL projection
var GHSLprojection = population_count.projection();
print('GHSLprojection',GHSLprojection)

var floodedprojection = flooded.projection();
print('floodedprojection',floodedprojection)


// Create a raster showing exposed population only using the  flood layer
var population_exposed = population_count
  .updateMask(flooded)

//Sum pixel values of exposed population raster 
var stats = population_exposed.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: roi,
  scale: 250,
  maxPixels:1e9 
});

// Population Density
var populationCountVis = {
  min: 0,
  max: 200.0,
  palette: ['060606','337663','337663','ffffff'],
};
Map.addLayer(population_count, populationCountVis, 'Population Density',0);

// Exposed Population
var populationExposedVis = {
  min: 0,
  max: 300.0,
  palette: ['yellow', 'orange', 'red'],
};

// get number of exposed people as integer
var number_pp_exposed = stats.getNumber('population_count').round();

print('Population Exposed', number_pp_exposed);

Map.addLayer(population_exposed, populationExposedVis, 'Exposed Population');



//----------------------------- Affected agricultural land ----------------------------//

// using https://glad.umd.edu/dataset/croplands
var LC = ee.ImageCollection('users/potapovpeter/Global_cropland_2019')
  .first()
  .clip(roi);

// Extract only cropland pixels using the classes cropland
var cropmask = LC
  .eq(1)
 
var cropland = LC
  .updateMask(cropmask)
  

// Calculate affected cropland using the  flood layer
var cropland_affected = flooded
  .updateMask(cropland)

// get pixel area of affected cropland layer
var crop_pixelarea = cropland_affected
  .multiply(ee.Image.pixelArea()); //calcuate the area of each pixel 

// sum pixels of affected cropland layer
var crop_stats = crop_pixelarea.reduceRegion({
  reducer: ee.Reducer.sum(), //sum all pixels with area information                
  geometry: roi,
  scale: 30,
  // maxPixels: 1e9
  });

// convert area to hectares
var crop_area_ha = crop_stats
  .getNumber(polarization)
  .divide(10000)
  .round();
  
print('Affected Cropland',crop_area_ha);  
 
  
  // Cropland
var croplandVis = {
  min: 0,
  max: 14.0,
  palette: ['30b21c'],
};

// Affected cropland
Map.addLayer(cropland_affected, croplandVis, 'Affected Cropland'); 

//-------------------------------- Affected urban area ------------------------------//

// Using the JRC built layer
// Filter urban areas

var Built = ee.Image("JRC/GHSL/P2016/BUILT_LDSMT_GLOBE_V1").select('built')

//Map.addLayer(Built, {min:0, max:6}, 'Built')
var urbanmask = Built.gt(2)
var urban = Built
  .updateMask(urbanmask)
  
//Calculate affected urban areas using the flood layer
var urban_affected = flooded
  .updateMask(urban);
  
// get pixel area of affected urban layer
var urban_pixelarea = urban_affected
  .multiply(ee.Image.pixelArea()); //calcuate the area of each pixel 
  
  
// sum pixels of affected cropland layer
var urban_stats = urban_pixelarea.reduceRegion({
  reducer: ee.Reducer.sum(), //sum all pixels with area information                
  geometry: roi,
  scale: 38,
  maxPixels: 1e9
  // bestEffort: true,
  });
  
  
// calculate area in SQM
var urban_area_sqm = urban_stats
  .getNumber(polarization)
  .round();
  
print('Affected Urban Area in SQM', urban_area_sqm)


// Urban
var urbanVis = {
  min: 0,
  max: 13.0,
  palette: ['grey'],
};

// Affected urban
Map.addLayer(urban_affected, urbanVis, 'Affected Urban'); 


/////------------------------------  PRECIPITATION FOR LAST 20 YEARS  ----------------------------------//

//Import the CHRIPS image collection 
var dataset = ee.ImageCollection("UCSB-CHG/CHIRPS/PENTAD")
                 .filter(ee.Filter.date('2002-01-01', '2022-12-31'))
                 .filterBounds(roi);
                  
var precipitation = dataset.select('precipitation').filterBounds(roi)

// Clip the collection to the ROI
var Clipped = dataset.map(function(precipitation) {
  return precipitation.clip(roi);
});

var precipitationMean = dataset.mean().reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: roi,
  scale: 1000, 
  maxPixels: 1e9
});

var precipitationVis = {
  min: 1.0,
  max: 17.0,
  palette: ['001137', '0aab1e', 'e7eb05', 'ff4a2d', 'e90000'],
};

Map.centerObject(geometry,9);
Map.addLayer(Clipped, precipitationVis, 'Precipitation');

var precipitationStdDev = dataset.reduce(ee.Reducer.stdDev()).reduceRegion({
  reducer: ee.Reducer.stdDev(),
  geometry: roi,
  scale: 1000, 
  maxPixels: 1e9
});

print('Mean precipitation (m):', precipitationMean);
print('Standard deviation of precipitation (m):', precipitationStdDev);

// // Generate Chart for the Precipitation Data

var chart = ui.Chart.image.series({
  imageCollection: dataset,
  region: geometry,
  reducer: ee.Reducer.mean(),
  scale: 1000, 
})
  .setChartType('LineChart')
  .setOptions({
    title: 'Monthly Precipitation Time Series',
    vAxis: { title: 'Precipitation (m)' },
    hAxis: { title: 'Date' },
    lineWidth: 1,
    pointSize: 3,
});

print(chart);


////------------------------------  JRC WATER LAYER TO CHECK FLOODING  ----------------------------------//

var waterDataset = ee.Image("JRC/GSW1_3/GlobalSurfaceWater");

// Load JRC Global Surface Water dataset
//var jrc = ee.Image('JRC/GSW1_3/GlobalSurfaceWater');

// Get the 'occurrence' band (0–100 showing % of time water was present)
var occurrence = waterDataset.select('occurrence');
var floodedArea = flooded.clip(geometry);

//var flooded = waterDataset.select('occurrence').gte(50);
//var floodedArea = flooded.clip(geometry);

var floodedStats = flooded.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: geometry,
  scale: 30 // Adjust the scale accordingly
});

Map.centerObject(geometry,9);
//Map.addLayer(floodedArea, {palette: '#d214ff'}, ' JRC Occurence Flooded Areas');
Map.addLayer(occurrence, {min: 0, max: 100, palette: ['ffffff', '0000ff']}, 'JRC Occurrence');


/////--------------------------COMPARISON USING COPERNICUS/SENTINEL-2 -------------------------------//

var S2_collection = ee.ImageCollection('COPERNICUS/S2')
  .sort('system:time_start');
  
var rgbVis = {
  min: 0.0,
  max: 3000,
  bands: ['B4', 'B3', 'B2'], //Red,green,blue
};

 
//Select images by predefined dates
  var S2_before_collection = S2_collection.filterDate(before_start, before_end);
  var S2_after_collection =  S2_collection.filterDate(after_start, after_end);
  
  //Create a mosaic of selected tiles and clip to study area
  var S2_before = S2_before_collection.mosaic().clip(roi);
  var S2_after = S2_after_collection.mosaic().clip(roi);

Map.centerObject(S2_before);
Map.addLayer(S2_before, rgbVis, 'Image Before Sentinel-2', 0);

Map.centerObject(S2_after);
Map.addLayer(S2_after, rgbVis, 'Image After Sentinel-2', 0);

// Function to mask clouds and shadows
function maskClouds(S2_before_collection) {
  var cloudMask = S2_before_collection.select('QA60').lt(20);
  var shadowMask = S2_before_collection.select('B11').gt(0.15);
  var mask = cloudMask.and(shadowMask);
  return S2_before_collection.updateMask(mask);
}

// Apply cloud and shadow masking to the image collection
var maskedCollection_before = S2_before_collection.map(maskClouds);

var masked_before = maskedCollection_before.mosaic().clip(roi)



function maskClouds(S2_before_collection) {
  var cloudMask = S2_before_collection.select('QA60').lt(20);
  var shadowMask = S2_before_collection.select('B11').gt(0.15);
  var mask = cloudMask.and(shadowMask);
  return S2_before_collection.updateMask(mask);
}

// Apply cloud and shadow masking to the image collection
var maskedCollection_before = S2_before_collection.map(maskClouds);

var masked_before = maskedCollection_before.mosaic().clip(roi)


Map.centerObject(geometry,9);
Map.addLayer(masked_before, rgbVis, 'Masked_Before_S2', false)

  
// Same Visualization for After Floods

function maskClouds(S2_after_collection) {
  var cloudMask = S2_after_collection.select('QA60').lt(20);
  var shadowMask = S2_after_collection.select('B11').gt(0.15);
  var mask = cloudMask.and(shadowMask);
  return S2_after_collection.updateMask(mask);
}

// Apply cloud and shadow masking to the image collection
var maskedCollection_after = S2_after_collection.map(maskClouds);

var masked_after = maskedCollection_after.mosaic().clip(roi)


Map.centerObject(geometry,9);
Map.addLayer(masked_after, rgbVis, 'Masked_After_S2', false)  


//---------------------------------- MAP PRODUCTION --------------------------------//

//-------------------------- Display the results on the map -----------------------//

// set position of panel where the results will be displayed 
var results = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px',
    width: '350px'
  }
});

//Prepare the visualtization parameters of the labels 
var textVis = {
  'margin':'0px 8px 2px 0px',
  'fontWeight':'bold'
  };
var numberVIS = {
  'margin':'0px 0px 15px 0px', 
  'color':'bf0f19',
  'fontWeight':'bold'
  };
var subTextVis = {
  'margin':'0px 0px 2px 0px',
  'fontSize':'12px',
  'color':'grey'
  };

var titleTextVis = {
  'margin':'0px 0px 15px 0px',
  'fontSize': '18px', 
  'font-weight':'', 
  'color': '3333ff'
  };

// Create lables of the results 
// Titel and time period
var title = ui.Label('Results', titleTextVis);
var text1 = ui.Label('Flood status between:',textVis);
var number1 = ui.Label(after_start.concat(" and ",after_end),numberVIS);

// Alternatively, print dates of the selected tiles
// var number1 = ui.Label('Please wait...',numberVIS); 
// (after_collection).evaluate(function(val){number1.setValue(val)}),numberVIS;

// Estimated flood extent 
var text2 = ui.Label('Estimated flood extent:',textVis);
var number2 = ui.Label('Please wait...',numberVIS); 
flood_area_ha.evaluate(function(val){number2.setValue(val+' hectares')}),numberVIS;

// Estimated number of exposed people
var text3 = ui.Label('Estimated number of exposed people: ',textVis);
var text3_2 = ui.Label('based on GHSL 2015 (250m)',subTextVis);
var number3 = ui.Label('Please wait...',numberVIS);
number_pp_exposed.evaluate(function(val){number3.setValue(val)}),numberVIS;

// Estimated area of affected cropland 
var MODIS_date = ee.String(LC.get('system:index')).slice(0,4);
var text4 = ui.Label('Estimated affected cropland:',textVis);
var text4_2 = ui.Label('Please wait', subTextVis)
MODIS_date.evaluate(function(val){text4_2.setValue('based on Potapov Land Cover '+val +' (30m)')}), subTextVis;
var number4 = ui.Label('Please wait...',numberVIS);
crop_area_ha.evaluate(function(val){number4.setValue(val+' hectares')}),numberVIS;

// Estimated area of affected urban
var text5 = ui.Label('Estimated affected urban areas:',textVis);
var text5_2 = ui.Label('Please wait', subTextVis)
MODIS_date.evaluate(function(val){text5_2.setValue('based on JRC HSL '+val +' (38m)')}), subTextVis;
var number5 = ui.Label('Please wait...',numberVIS);
urban_area_sqm.evaluate(function(val){number5.setValue(val+' sqm')}),numberVIS;

// Disclaimer
var text6 = ui.Label('Disclaimer: This product has been derived automatically without validation data. All geographic information has limitations due to the scale, resolution, date and interpretation of the original source materials. No liability concerning the content or the use thereof is assumed by the producer.',subTextVis)

// Produced by...
var text7 = ui.Label('Script produced by: PoliMI 2023', subTextVis)

// Add the labels to the panel 
results.add(ui.Panel([
        title,
        text1,
        number1,
        text2,
        number2,
        text3,
        text3_2,
        number3,
        text4,
        text4_2,
        number4,
        text5,
        text5_2,
        number5,
        text6,
        text7]
      ));

// Add the panel to the map 
Map.add(results);

//----------------------------- Display legend on the map --------------------------//

// Create legend (*credits to thisearthsite on Open Geo Blog: https://mygeoblog.com/2016/12/09/add-a-legend-to-to-your-gee-map/)
// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-right',
    padding: '8px 14px',
  }
});
 
// Create legend title
var legendTitle = ui.Label('Legend',titleTextVis);
 
// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
//  Palette with the colors
var palette =['#0000FF', '#30b21c', 'brown'];
 
// name of the legend
var names = ['Flooded areas','Affected cropland','Affected urban'];
 
// Add color and and names
for (var i = 0; i < 3; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  

// Create second legend title to display exposed population density
var legendTitle2 = ui.Label({
value: 'Exposed population density',
style: {
fontWeight: 'bold',
fontSize: '15px',
margin: '10px 0 0 0',
padding: '0'
}
});

// Add second title to the panel
legend.add(legendTitle2);

// create the legend image
var lon = ee.Image.pixelLonLat().select('latitude');
var gradient = lon.multiply((populationExposedVis.max-populationExposedVis.min)/100.0).add(populationExposedVis.min);
var legendImage = gradient.visualize(populationExposedVis);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label('> '.concat(populationExposedVis['max']))
],
});
 
legend.add(panel);
 
// create thumbnail from the image
var thumbnail = ui.Thumbnail({
image: legendImage,
params: {bbox:'0,0,10,100', dimensions:'10x50'},
style: {padding: '1px', position: 'bottom-center'}
});
 
// add the thumbnail to the legend
legend.add(thumbnail);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label(populationExposedVis['min'])
],
});
 
legend.add(panel);
 
// add legend to map (alternatively you can also print the legend to the console)
Map.add(legend);
